% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/linbin.R
\name{seq.bin.event.table}
\alias{seq.bin.event.table}
\title{Generate Sequential Bins}
\usage{
\method{seq}{bin.event.table}(coverage, bin.count = NULL, bin.length = NULL,
  adaptive = FALSE)
}
\arguments{
\item{coverage}{the intervals within which the bins should be generated. Can be either a numeric vector of length 2 or a bin EventTable.}

\item{bincount}{number of bins, a non-negative integer. If coverage contains gaps, the bin enpoints are adjusted so that each bin contains an equal share of the total coverage, but gaps are not preserved.}

\item{binlength}{length of bins, a non-negative real number. Gaps in coverage do not count towards the length of a bin. When binlength does not evenly divide the coverage, a smaller bin is added to the end of the sequence.}

\item{adaptive.binlength}{logical value indicating whether binlength should be adjusted as needed so that a whole number of bins fit within each interval of continuous coverage, preserving gaps.}

\item{verbose}{logical value indicating whether to print verbose messages.}
}
\value{
An \code{EventTable} of endpoints (\code{FROM} and \code{TO}).
}
\description{
\code{seq.binEventTable} generates regularly sequenced bins with no gaps.
}
\details{
Bins are generated Given the specified \code{binRange}, bins are automatically fitted to a range according to a length or numer of bins.
}
\seealso{
\code{\link{range.EventTable}}, \code{\link{coverage.EventTable}}, and  \code{\link{crop.EventTable}} for interval operations useful for building bins tailored to a particular situation.
}

